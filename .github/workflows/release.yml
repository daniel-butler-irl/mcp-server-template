name: Release

on:
  push:
    branches: [ main ]

jobs:
  release:
    runs-on: ubuntu-latest
    if: "!contains(github.event.head_commit.message, 'chore: bump version')"

    steps:
    - uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        fetch-depth: 0

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"

    - name: Install uv
      uses: astral-sh/setup-uv@v2

    - name: Install dependencies
      run: |
        uv sync --dev

    - name: Run tests
      run: |
        uv run pytest

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'

    - name: Determine version bump
      id: version
      run: |
        # Simple version bumping - patch version
        CURRENT_VERSION=$(python -c "import tomllib; print(tomllib.load(open('pyproject.toml', 'rb'))['project']['version'])")
        echo "Current version: $CURRENT_VERSION"

        # Split version and increment patch
        IFS='.' read -ra VERSION_PARTS <<< "$CURRENT_VERSION"
        MAJOR=${VERSION_PARTS[0]}
        MINOR=${VERSION_PARTS[1]}
        PATCH=${VERSION_PARTS[2]}

        NEW_PATCH=$((PATCH + 1))
        NEW_VERSION="$MAJOR.$MINOR.$NEW_PATCH"

        echo "New version: $NEW_VERSION"
        echo "version=$NEW_VERSION" >> $GITHUB_OUTPUT

    - name: Update pyproject.toml version
      run: |
        sed -i 's/version = "[^"]*"/version = "${{ steps.version.outputs.version }}"/' pyproject.toml

    - name: Update manifest.json version
      run: |
        python -c "
        import json
        with open('manifest.json', 'r') as f:
            manifest = json.load(f)
        manifest['version'] = '${{ steps.version.outputs.version }}'
        with open('manifest.json', 'w') as f:
            json.dump(manifest, f, indent=2)
        "

    - name: Ensure icon exists
      run: |
        if [ ! -f icon.png ]; then
          echo "Creating placeholder icon..."
          touch icon.png
        fi

    - name: Build DXT extension
      run: |
        npx @anthropic-ai/dxt pack
        ls -la *.dxt

    - name: Commit version bump
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add pyproject.toml manifest.json
        git commit -m "chore: bump version to ${{ steps.version.outputs.version }}"
        git push

    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ steps.version.outputs.version }}
        release_name: Release v${{ steps.version.outputs.version }}
        body: |
          Automated release v${{ steps.version.outputs.version }}

          ## Changes
          - Automatic version bump and DXT extension build

          ## Installation
          Download the `.dxt` file and install it in Claude Desktop.
        draft: false
        prerelease: false

    - name: Upload DXT Extension
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./mcp-server-template.dxt
        asset_name: mcp-server-template-v${{ steps.version.outputs.version }}.dxt
        asset_content_type: application/zip
